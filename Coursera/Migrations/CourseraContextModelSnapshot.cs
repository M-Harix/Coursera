// <auto-generated />
using System;
using Coursera.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Coursera.Migrations
{
    [DbContext(typeof(CourseraContext))]
    partial class CourseraContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Coursera.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Credit")
                        .HasColumnType("tinyint")
                        .HasColumnName("credit");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("instructor_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("time_created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("TotalTime")
                        .HasColumnType("tinyint")
                        .HasColumnName("total_time");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Coursera.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("time_created")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK_teachers");

                    b.ToTable("instructors", (string)null);
                });

            modelBuilder.Entity("Coursera.Models.Student", b =>
                {
                    b.Property<string>("Pin")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("pin")
                        .IsFixedLength();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("time_created")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Pin");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("Coursera.Models.StudentsCoursesXref", b =>
                {
                    b.Property<string>("StudentPin")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("student_pin")
                        .IsFixedLength();

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("completion_date");

                    b.HasKey("StudentPin", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("students_courses_xref", (string)null);
                });

            modelBuilder.Entity("Coursera.Models.Course", b =>
                {
                    b.HasOne("Coursera.Models.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK_courses_instructors");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Coursera.Models.StudentsCoursesXref", b =>
                {
                    b.HasOne("Coursera.Models.Course", "Course")
                        .WithMany("StudentsCoursesXrefs")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_students_courses_xref_courses");

                    b.HasOne("Coursera.Models.Student", "StudentPinNavigation")
                        .WithMany("StudentsCoursesXrefs")
                        .HasForeignKey("StudentPin")
                        .IsRequired()
                        .HasConstraintName("FK_students_courses_xref_students");

                    b.Navigation("Course");

                    b.Navigation("StudentPinNavigation");
                });

            modelBuilder.Entity("Coursera.Models.Course", b =>
                {
                    b.Navigation("StudentsCoursesXrefs");
                });

            modelBuilder.Entity("Coursera.Models.Instructor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Coursera.Models.Student", b =>
                {
                    b.Navigation("StudentsCoursesXrefs");
                });
#pragma warning restore 612, 618
        }
    }
}
